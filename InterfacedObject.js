// Generated by CoffeeScript 1.8.0
(function() {
  var EventEmitter, InterfacedObject, OBJECT_STATES, inherits, util;

  EventEmitter = require("events").EventEmitter;

  util = require("./util");

  inherits = util.inherits;

  OBJECT_STATES = {
    initing: 1,
    inited: 2,
    destroying: 0,
    destroyed: null
  };

  module.exports = InterfacedObject = (function() {
    inherits(InterfacedObject, EventEmitter);

    InterfacedObject.prototype.OBJECT_STATES = OBJECT_STATES;

    InterfacedObject.prototype.__defineGetter__("objectState", function() {
      var vState;
      vState = this._objectState_;
      if (vState == null) {
        return "destroyed";
      } else {
        return ["destroying", "initing", "inited"][vState];
      }
    });

    InterfacedObject.prototype.setObjectState = function(value, emitted) {
      if (emitted == null) {
        emitted = true;
      }
      this._objectState_ = OBJECT_STATES[value];
      if (emitted) {
        this.emit(value, this);
      }
    };

    InterfacedObject.prototype.init = function() {};

    InterfacedObject.prototype.final = function() {};

    InterfacedObject.prototype.chageObjectStateTo = function(aState) {};

    function InterfacedObject() {
      this.setObjectState("initing");
      this.RefCount = 0;
      this.setMaxListeners(Infinity);
      this.init.apply(this, arguments);
      this.setObjectState("inited");
    }

    InterfacedObject.prototype.addRef = function() {
      return ++this.RefCount;
    };

    InterfacedObject.prototype.destroy = function() {
      this.setObjectState("destroying");
      this.emit("destroying", this);
      this.final();
      return this.setObjectState("destroyed");
    };

    InterfacedObject.prototype.release = function() {
      var result;
      result = --this.RefCount;
      if (result < 0) {
        this.destroy();
      }
      return result;
    };

    InterfacedObject.prototype.free = InterfacedObject.prototype.release;

    return InterfacedObject;

  })();

}).call(this);
